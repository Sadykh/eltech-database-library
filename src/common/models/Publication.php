<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "publication".
 *
 * @property int $id
 * @property int $user_id
 * @property int $author_id
 * @property int $language_id
 * @property int $year
 * @property int $journal_id
 * @property int $scopus_id
 * @property string $scopus_number
 * @property string $doi_number
 * @property int $wos_id
 * @property int $rinch_id
 * @property int $peer_reviewed_id
 * @property int $conference_id
 * @property string $isbn
 * @property int $created_at
 * @property int $updated_at
 *
 * @property Author $author
 * @property Journal $journal
 * @property User $user
 */
class Publication extends \yii\db\ActiveRecord
{
    const STATUS_NO_ACTIVE = 0;
    const STATUS_ACTIVE = 1;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'publication';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['author_id', 'language_id', 'journal_id',], 'required'],
            [['user_id', 'author_id', 'language_id', 'year', 'journal_id', 'scopus_id', 'wos_id', 'rinch_id', 'peer_reviewed_id', 'conference_id', 'created_at', 'updated_at'], 'integer'],
            [['scopus_number', 'doi_number', 'isbn'], 'string', 'max' => 191],
            [['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => Author::className(), 'targetAttribute' => ['author_id' => 'id']],
            [['journal_id'], 'exist', 'skipOnError' => true, 'targetClass' => Journal::className(), 'targetAttribute' => ['journal_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::class
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'author_id' => 'Author ID',
            'language_id' => 'Language ID',
            'year' => 'Year',
            'journal_id' => 'Journal ID',
            'scopus_id' => 'Scopus ID',
            'scopus_number' => 'Scopus Number',
            'doi_number' => 'DOI Number',
            'wos_id' => 'Wos ID',
            'rinch_id' => 'РИНЦ',
            'peer_reviewed_id' => 'Peer Reviewed ID',
            'conference_id' => 'Conference ID',
            'isbn' => 'Isbn',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(Author::className(), ['id' => 'author_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getJournal()
    {
        return $this->hasOne(Journal::className(), ['id' => 'journal_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * @inheritdoc
     * @return \common\queries\PublicationQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\queries\PublicationQuery(get_called_class());
    }

    public function beforeValidate()
    {
        if ($this->user_id == null) {
            $this->user_id = Yii::$app->user->id;
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
}
